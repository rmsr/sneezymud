# hey emacs, this is -*- python -*- vim: ft=python
import os
import subprocess
import sys

# NOTE site_scons/site_init.py runs before this

# TODO:
# - clang support
# - gch precompiled headers
# - profile-guided optimization build after test run

Default('sneezy')

Help("""
Targets: (default is 'sneezy')
    sneezy          Build the main binary - output: sneezy
    lowtools        Build the low tools - output: lowtools/*
    objs/*/*.os     Build a specific file - eg: objs/game/game_hilo.os
    tags            Rebuild emacs etags
    -c              Clean up objects and executables (all build output)

Build options:
    CXX=g++         Specify C++ compiler to use
    CPPPATH=        Add to the header include search path
    LIBPATH=        Add to the library linker search path
    olevel=         Level of optimization for the -O flag

Build boolean options: (accept 1/0 y/n yes/no on/off)
    ccache=     off     Use ccache wrapper around compiler
    debug=      off     Enable high-overhead aggressive run-time overflow etc checks
    gprof=      off     Enable gprof profiling
    harden=     on      Enable low-overhead run-time overflow etc checks
    lto=        off     Optimize entire Sneezy program at once - also sets
                        optimize=on
    optimize=   off     Use -O3 optimization vs -O1
    pretty=     on      Prettify output
    shared=     on      Build MUD code as shared libraries

Options can be specified on the commandline or via environment variables.

The defaults are optimized for developing with Sneezy rather than for running
it. Good production flags: g++-4.9 + harden=1 lto=1 shared=0 (and optimize=1
if you don't need crash debugging).
""")


flag_ccache =    get_bool_option('ccache',      False)
flag_debug =     get_bool_option('debug',       False)
flag_gprof =     get_bool_option('gprof',       False)
flag_harden   =  get_bool_option('harden',      True)
flag_lto =       get_bool_option('lto',         False)
flag_optimize =  get_bool_option('optimize',    False)
flag_pretty =    get_bool_option('pretty',      True)
flag_shared =    get_bool_option('shared',      True)

opt_includes =        get_option('CPPPATH',     '')
opt_libdirs =         get_option('LIBPATH',     '')
opt_olevel =          get_option('olevel',      '3' if flag_optimize else '1')
opt_cxx =             get_option('CXX',         'g++')


if flag_ccache:
    opt_cxx = 'ccache ' + opt_cxx

olevel_flag = opt_olevel if opt_olevel.startswith('-O') else '-O' + opt_olevel


env = Environment(
    tools = ['default', 'cxxtest'],
    shared = flag_shared,
    CXX = opt_cxx,
    SHCXX = opt_cxx, # must have both of these, along with LINK and SHLINK
    CPPPATH = opt_includes,
    LIBPATH = opt_libdirs,
)
Export('env')


## detect compiler and version
gcc_version = None
clang_version = None
cxx_version = subprocess.check_output(opt_cxx.split() + ['--version'])
if cxx_version.startswith('g++'):
    # version is 'x.y.z' at end of first line
    gcc_version = cxx_version.split('\n')[0].split()[-1].split('.')
    # format is (major, minor) ie (4, 6)
    gcc_version = tuple(map(int, gcc_version[:2]))
elif 'clang' in cxx_version:
    # version is 'clang version x.y.z ' somewhere in first line
    clang_version = cxx_version.split('\n')[0].partition('clang version ')[2]
    clang_version = tuple(map(int, clang_version.split()[0].split('.')[:2]))
else:
    raise Exception('unrecognized compiler')


## debug: run-time bug detection with high overhead
if flag_debug:
    # undefined behavior sanitizer
    if gcc_version >= (4, 9) or clang_version >= (3, 2):
        env.Append(CXXFLAGS='-fsanitize=undefined')
        env.Append(extra_libs=['ubsan'])
    # AddressSanitizer
    if gcc_version >= (4, 8) or clang_version >= (3, 2):
        env.Append(extra_libs=['asan'])
        env.Append(CXXFLAGS=['-fsanitize=address', '-fno-omit-frame-pointer',
                             '-fno-common'])
    if clang_version >= (3, 2):
        env.Append(CXXFLAGS='-fsanitize=integer')


## harden: security flags, slow runtime a bit
if flag_harden:
    if flag_debug:
        print >>sys.stderr(), 'WARNING: not recommended to enable both debug and harden'
    if gcc_version:
        # at startup, turn some elf sections RO, and prebind dynamic bindings
        env.Append(CXXFLAGS=['-Wl,-z,now', '-Wl,-z,relro'])
        # buffer overflow checker, only works for -O1 or greater
        env.Append(CXXFLAGS='-D_FORTIFY_SOURCE=2')
    if not flag_shared:
        # position-independent executable (shared mode already has -fPIC)
        env.Append(CXXFLAGS='-fPIE', LINKFLAGS=['-fPIE', '-pie'])
    # buffer overflow checker, only works for -O1 or greater
    env.Append(CXXFLAGS='-D_FORTIFY_SOURCE=2')
    # stack overflow checker
    if gcc_version >= (4, 9) or clang_version >= (3, 5):
        env.Append(CXXFLAGS='-fstack-protector-strong')
    else:
        env.Append(CXXFLAGS=['-fstack-protector', '--param', 'ssp-buffer-size=4'])


## optimize: slow, bad for debugging, good for the CPU
opt_level = '-O1'
if flag_optimize:
    opt_level = '-O3'
env.Append(CXXFLAGS=opt_level)


## lto: compiles even slower, totally destroys debugging
if flag_lto:
    if gcc_version >= (4, 8):
        lto_flag = '-flto=%i' % GetOption('num_jobs')
        env.Append(CXXFLAGS=[lto_flag],
                   LINKFLAGS=[olevel_flag, lto_flag, '-fuse-linker-plugin'])
        # needed for lto-linking static libsneezy
        env.Replace(AR='gcc-ar', RANLIB='gcc-ranlib')
    elif clang_version >= (3, 0):
        env.Append(CXXFLAGS=['-flto'], LINKFLAGS=[olevel_flag, '-flto'])
    else:
        print >>sys.stderr(), 'WARNING: compiler is too old to support LTO'


## gprof: emit gprof-compatible profiling during runtime
if flag_gprof:
    env.Append(CXXFLAGS='-pg', LINKFLAGS='-pg')


## shared: compile most of sneezymud as shared libraries
if flag_shared:
    env.Append(CXXFLAGS='-fPIC')


## universal flags
env.Append(LINKFLAGS='-g')
env.Append(CXXFLAGS=[
    olevel_flag,
    '-g',                   # include debugging symbols always
    '-Wall',                # all rec. warnings shown
    '-Werror',              # turns a warning into an error
    '-Wformat-security',    # warn on bare nonliteral printf / scanf
    '-Wpointer-arith',      # looks for things that depend on sizeof()
    '-Wcast-qual',          # Warns about using casting to remove const
    '-Wcast-align',         # a pointer cast changes alignment
    '-Wwrite-strings',      # looks for formal const char* sent to char*
    '-Woverloaded-virtual', # virtual without a declaration in base class
# these are more trouble than they're worth currently
#    '-Wextra',              # include some extra warnings
#    '-Wconversion',         # bad conversions
#    '-Wsign-conversion',
])


## pretty: concise build status messages
if flag_pretty:
    pretty_compile = "\033[35mCompiling\033[0m $SOURCE"
    pretty_link = "\033[31mLinking\033[0m $TARGET"
    pretty_index = "\033[31mIndexing\033[0m $TARGET"
    pretty_install = "\033[33mInstalling\033[0m '$SOURCE' as '$TARGET'"
    env.Append(CXXCOMSTR=pretty_compile, SHCXXCOMSTR=pretty_compile,
               LINKCOMSTR=pretty_link, SHLINKCOMSTR=pretty_link,
               ARCOMSTR=pretty_link, RANLIBCOMSTR=pretty_index)
    Progress([ "\033[32mChecking targets\033[0m %s\r" % s for s in '-\\|/' ],
             interval=5)


## pull in C++ targets
env.SConscript(
        'code/SConscript', variant_dir='#/objs', duplicate=0, exports='env')


## etags
PhonyTargets(env, tags='@etags code/*/*')
